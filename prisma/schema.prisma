// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String             @id @default(uuid()) @db.Uuid
    name          String
    email         String             @unique
    password      String
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    organizations OrganizationUser[]

    @@map("users")
}

model Organization {
    id           String             @id @default(uuid()) @db.Uuid
    name         String
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
    users        OrganizationUser[]
    leads        Lead[]
    interactions Interaction[]

    @@map("organizations")
}

enum OrganizationRole {
    OWNER
    ADMIN
    MEMBER
}

model OrganizationUser {
    userId         String           @map("user_id") @db.Uuid
    organizationId String           @map("organization_id") @db.Uuid
    role           OrganizationRole @default(MEMBER)

    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([userId, organizationId])
    @@map("organizations_users")
}

model Lead {
    id             String   @id @default(uuid()) @db.Uuid
    organizationId String   @map("organization_id") @db.Uuid
    name           String
    email          String   @unique
    phone          String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    interactions Interaction[]

    @@map("leads")
}

model Interaction {
    id             String   @id @default(uuid()) @db.Uuid
    leadId         String   @map("lead_id") @db.Uuid
    organizationId String   @map("organization_id") @db.Uuid
    message        String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    lead         Lead         @relation(fields: [leadId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("interactions")
}
